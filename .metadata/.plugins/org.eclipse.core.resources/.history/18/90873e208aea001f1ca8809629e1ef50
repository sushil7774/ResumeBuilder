package com.spring.resume.controllers;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import com.spring.resume.entities.ResumeRegister;
import com.spring.resume.exceptions.ResumeExceptions;
import com.spring.resume.repository.ResumeRepository;

@RestController
@CrossOrigin(origins = "http://localhost:4200")
public class ResumeRegisterController {
	@Autowired
	private ResumeRepository resumeRepository;

	@GetMapping("/register")
	public List<ResumeRegister> getAllUser() {
		return resumeRepository.findAll();
	}

	@GetMapping("/getbyid/{userId}")
	public ResponseEntity<ResumeRegister> getbyId(@PathVariable int userId,
			@RequestBody ResumeRegister resumeregister) {
		ResumeRegister User = resumeRepository.findById(userId).orElseThrow(() -> new ResumeExceptions("Id not Found"));
		return ResponseEntity.ok(User);
	}

	@PostMapping("/register")
	public ResumeRegister createUser(@RequestBody ResumeRegister resumeregister) {
		if (resumeRepository.findByEmailId(resumeregister.getEmailId()) != null) {
			throw new ResumeExceptions("Email ID already exists");
		} else {
			return resumeRepository.save(resumeregister);
		}
	}

	@PostMapping("/login")
	public ResumeRegister loginUser(@RequestBody ResumeRegister resumeregister) {
		ResumeRegister user = resumeRepository.findByEmailId(resumeregister.getEmailId());
		if (user != null && user.getPassword().equals(resumeregister.getPassword())) {
			return resumeregister;
		}

		else {
			throw new ResumeExceptions("User dose not exists");
		}

	}

	@PutMapping("/update/{userId}")
	public ResponseEntity<ResumeRegister> updateUser(@PathVariable int userId, @RequestBody ResumeRegister resumereg) {
		ResumeRegister User = resumeRepository.findById(userId)
				.orElseThrow(() -> new ResumeExceptions("User does not Exists"));
		User.setUserName(resumereg.getUserName());
		User.setEmailId(resumereg.getEmailId());
		User.setPassword(resumereg.getPassword());
		resumeRepository.save(User);
		return ResponseEntity.ok(User);
	}
}
